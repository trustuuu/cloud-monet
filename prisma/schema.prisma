// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// datasource db {
//   //provider = "postgresql"
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String?  @unique
  password   String?
  phone      String?  @unique
  github_id  String?  @unique
  avatar     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status     Int      @default(1)

  sms_tokens         SMSToken[]
  products           Product[]
  art_studios        ArtStudio[]
  art_studio_members ArtStudioMember[]
  posts              Post[]
  comments           Comment[]
  likes              Like[]

  messages     Message[]
  chat_rooms   ChatRoom[]
  live_streams LiveStream[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  phone      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id          Int    @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  status      Int    @default(1)

  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  catetory    Catetory?  @relation(fields: [catetoryId], references: [id])
  catetoryId  Int?
  art_studio  ArtStudio? @relation(fields: [artStudioId], references: [id], onDelete: Cascade)
  artStudioId Int?
  posts       Post[]
  likes       Like[]
}

model Catetory {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model ArtStudio {
  id          Int    @id @default(autoincrement())
  name        String
  photo       String
  description String
  status      Int    @default(1)

  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  owner      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  members    ArtStudioMember[]
  products   Product[]
}

model ArtStudioMember {
  id     Int @id @default(autoincrement())
  status Int @default(1)

  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  role            ArtStudioRole @relation(fields: [ArtStudioRoleId], references: [id])
  ArtStudioRoleId Int
  art_studio      ArtStudio     @relation(fields: [artStudioId], references: [id], onDelete: Cascade)
  artStudioId     Int
  member          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
}

model ArtStudioRole {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  members     ArtStudioMember[]
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  owner       User      @relation(fields: [userId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  userId      Int
  productId   Int
  comments    Comment[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  owner      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  owner      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int

  @@id(name: "id", [userId, productId])
}

model ChatRoom {
  id         String   @id @default(cuid())
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Message Message[]
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  chatRoomId String
  userId     Int
}

model LiveStream {
  id         Int      @id @default(autoincrement())
  title      String
  stream_key String
  stream_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}
