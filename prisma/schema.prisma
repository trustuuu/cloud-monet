// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../node_modules/.prisma/client"
}

datasource db {
  //provider = "postgresql"
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String?  @unique
  password   String?
  phone      String?  @unique
  github_id  String?  @unique
  avatar     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status     Int      @default(1)

  SMSToken        SMSToken[]
  Product         Product[]
  ArtStudio       ArtStudio[]
  ArtStudioMember ArtStudioMember[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  phone      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id          Int    @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  status      Int    @default(1)

  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  catetory    Catetory?  @relation(fields: [catetoryId], references: [id])
  catetoryId  Int?
  art_stuio   ArtStudio? @relation(fields: [artStudioId], references: [id])
  artStudioId Int?
}

model Catetory {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]
}

model ArtStudio {
  id          Int    @id @default(autoincrement())
  name        String
  photo       String
  description String
  status      Int    @default(1)

  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  owner           User              @relation(fields: [userId], references: [id])
  userId          Int
  ArtStudioMember ArtStudioMember[]
  Product         Product[]
}

model ArtStudioMember {
  id     Int @id @default(autoincrement())
  status Int @default(1)

  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  role            ArtStudioRole @relation(fields: [ArtStudioRoleId], references: [id])
  ArtStudioRoleId Int
  art_studio      ArtStudio     @relation(fields: [artStudioId], references: [id])
  artStudioId     Int
  member          User          @relation(fields: [userId], references: [id])
  userId          Int
}

model ArtStudioRole {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  ArtStudioMember ArtStudioMember[]
}
